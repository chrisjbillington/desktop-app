name: Build

on:
  push:
    branches:
      - master
  create:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+*'

defaults:
  run:
    shell: bash

env:
  SCM_LOCAL_SCHEME: no-local-version

      
jobs:


  sdist:
    name: sdist
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - if: github.event.ref_type != 'tag'
        run: |
          git fetch --prune --unshallow
          git tag -d $(git tag --points-at HEAD)

      - uses: actions/setup-python@v2

      - run: |
          python -m pip install --upgrade pip setuptools wheel setuptools_scm
          python setup.py sdist
    
      - uses: actions/upload-artifact@v1
        with:
          name: dist
          path: ./dist


  wheel:
    name: wheel
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - { os: macos-latest,    python: 3.6,  arch: x64 }
          - { os: macos-latest,    python: 3.7,  arch: x64 }
          - { os: macos-latest,    python: 3.8,  arch: x64 }

          - { os: windows-latest,  python: 3.6,  arch: x64 }
          - { os: windows-latest,  python: 3.7,  arch: x64 }
          - { os: windows-latest,  python: 3.8,  arch: x64 }

          - { os: windows-latest,  python: 3.6,  arch: x86 }
          - { os: windows-latest,  python: 3.7,  arch: x86 }
          - { os: windows-latest,  python: 3.8,  arch: x86 }

    steps:
      - uses: actions/checkout@v2
      - if: github.event.ref_type != 'tag'
        run: |
          git fetch --prune --unshallow
          git tag -d $(git tag --points-at HEAD)

      - uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python }}
          architecture: ${{ matrix.arch }}

      - run: |
          python -m pip install --upgrade pip setuptools wheel setuptools_scm
          python setup.py bdist_wheel

      - uses: actions/upload-artifact@v1
        with:
          name: dist
          path: ./dist


  manylinux:
    name: manylinux wheels
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - { python: 'cp36-cp36m cp37-cp37m cp38-cp38' }

    steps:
      - uses: actions/checkout@v2
      - if: github.event.ref_type != 'tag'
        run: |
          git fetch --prune --unshallow
          git tag -d $(git tag --points-at HEAD)

      - uses: RalfG/python-wheels-manylinux-build@v0.2.2-manylinux2010_x86_64
        with:
          python-versions: ${{ matrix.python }}
          build-requirements: setuptools_scm

      - run: mkdir -p dist && cp wheelhouse/*manylinux*.whl dist

      - uses: actions/upload-artifact@v1
        with:
          name: dist
          path: ./dist


  conda:
    name: conda packages
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - { os: ubuntu-latest,   python: 3.6,  miniconda: Miniconda3-latest-Linux-x86_64.sh,     from_wheel: false }
          - { os: ubuntu-latest,   python: 3.7,  miniconda: Miniconda3-latest-Linux-x86_64.sh,     from_wheel: false }
          - { os: ubuntu-latest,   python: 3.8,  miniconda: Miniconda3-latest-Linux-x86_64.sh,     from_wheel: false }

          - { os: macos-latest,    python: 3.6,  miniconda: Miniconda3-latest-MacOSX-x86_64.sh,    from_wheel: false }
          - { os: macos-latest,    python: 3.7,  miniconda: Miniconda3-latest-MacOSX-x86_64.sh,    from_wheel: false }
          - { os: macos-latest,    python: 3.8,  miniconda: Miniconda3-latest-MacOSX-x86_64.sh,    from_wheel: false }

          - { os: windows-latest,  python: 3.6,  miniconda: Miniconda3-latest-Windows-x86_64.exe,  from_wheel: true  }
          - { os: windows-latest,  python: 3.7,  miniconda: Miniconda3-latest-Windows-x86_64.exe,  from_wheel: true  }
          - { os: windows-latest,  python: 3.8,  miniconda: Miniconda3-latest-Windows-x86_64.exe,  from_wheel: true  }

          - { os: windows-latest,  python: 3.6,  miniconda: Miniconda3-latest-Windows-x86.exe,     from_wheel: true  }
          - { os: windows-latest,  python: 3.7,  miniconda: Miniconda3-latest-Windows-x86.exe,     from_wheel: true  }
          - { os: windows-latest,  python: 3.8,  miniconda: Miniconda3-latest-Windows-x86.exe,     from_wheel: true  }

    steps:
    - uses: actions/checkout@v2
    - if: github.event.ref_type != 'tag'
      run: |
        git fetch --prune --unshallow
        git tag -d $(git tag --points-at HEAD)

    - name: Setup conda
      run: |
        curl -LO "https://repo.continuum.io/miniconda/${{ matrix.miniconda }}" 
        if [ "$RUNNER_OS" == "Windows" ]; then
            cmd //C "${{ matrix.miniconda }} /S /D=%CD%\.miniconda"
        else
            bash "${{ matrix.miniconda }}" -b -p .miniconda
        fi
        source .miniconda/etc/profile.d/conda.sh
        conda activate
        conda create -n py${{ matrix.python }} python=${{ matrix.python }}
        
    - name: conda build
      run: |
        source .miniconda/etc/profile.d/conda.sh
        conda activate py${{ matrix.python }}
        conda install -c cbillington setuptools_conda
        if [ ${{ matrix.from_wheel }} == "true" ]; then
            python setup.py dist_conda --from-wheel
        else
            python setup.py dist_conda --pythons ${{ matrix.python }}
        fi

    - uses: actions/upload-artifact@v1
      with:
        name: conda_packages
        path: ./conda_packages


  upload:
    name: Upload
    runs-on: ubuntu-latest
    needs: [sdist, wheel, manylinux, conda]

    steps:
    - uses: actions/download-artifact@v2
      with:
        name: dist
        path: ./dist

    - uses: actions/download-artifact@v2
      with:
        name: conda_packages
        path: ./conda_packages

    - name: TestPyPI
      uses: pypa/gh-action-pypi-publish@v1.1.0
      with:
        user: __token__
        password: ${{ secrets.testpypi }}
        repository_url: https://test.pypi.org/legacy/

    - name: PyPI
      if: github.event.ref_type == 'tag'
      uses: pypa/gh-action-pypi-publish@v1.1.0
      with:
        user: __token__
        password: ${{ secrets.pypi }}

    - name: Install Miniconda and cloud client
      run: |
        MINICONDA=Miniconda3-latest-Linux-x86_64.sh
        curl -LO "https://repo.continuum.io/miniconda/$MINICONDA" 
        bash "$MINICONDA" -b -p .miniconda
        source .miniconda/etc/profile.d/conda.sh
        conda activate
        conda install anaconda-client

    - name: Anaconda cloud test label
      if: github.event.ref_type != 'tag'
      run: |
        source .miniconda/etc/profile.d/conda.sh
        conda activate
        anaconda \
          --token ${{ secrets.ANACONDA_API_TOKEN }} \
          upload \
          --user labscript-suite \
          --label test \
          conda_packages/*/*
          
    - name: Anaconda cloud main label
      if: github.event.ref_type == 'tag'
      run: |
        source .miniconda/etc/profile.d/conda.sh
        conda activate
        anaconda \
          --token ${{ secrets.ANACONDA_API_TOKEN }} \
          upload \
          --user labscript-suite \
          conda_packages/*/*