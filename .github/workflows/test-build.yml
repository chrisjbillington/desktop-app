name: Build and Release

on:
  push:
    branches:
      - master
      - maintenance/*
  create:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+*'

env:
  PACKAGE_NAME: desktop-app
  SCM_LOCAL_SCHEME: no-local-version
  ANACONDA_USER: labscript-suite

  # Configuration for a package with compiled extensions:
  PURE: false
  NOARCH: false

  # Configuration for a package with no extensions, but with dependencies that differ by
  # platform or Python version:
  # PURE: true
  # NOARCH: false

  # Configuration for a package with no extensions and the same dependencies on all
  # platforms and Python versions. For this configuration you should comment out all but
  # the first entry in the job matrix of the build job since multiple platforms are not
  # needed.
  # PURE: true
  # NOARCH: true

jobs:
  build:
    name: Build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - { os: ubuntu-latest,   python: '3.10',  arch: x64 }
          - { os: ubuntu-latest,   python: '3.9',  arch: x64 }
          - { os: ubuntu-latest,   python: '3.8',  arch: x64 }
          - { os: ubuntu-latest,   python: '3.7',  arch: x64 }

          - { os: macos-10.15,    python: '3.10',  arch: x64 }
          - { os: macos-10.15,    python: '3.9',  arch: x64 }
          - { os: macos-10.15,    python: '3.8',  arch: x64 }
          - { os: macos-10.15,    python: '3.7',  arch: x64 }

          - { os: windows-latest,  python: '3.10',  arch: x64 }
          - { os: windows-latest,  python: '3.9',  arch: x64 }
          - { os: windows-latest,  python: '3.8',  arch: x64 }
          - { os: windows-latest,  python: '3.7',  arch: x64 }

          - { os: windows-latest,  python: '3.10',  arch: x86 }
          - { os: windows-latest,  python: '3.9',  arch: x86 }
          - { os: windows-latest,  python: '3.8',  arch: x86 }
          - { os: windows-latest,  python: '3.7',  arch: x86 }

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Ignore Tags
        if: github.event.ref_type != 'tag'
        run: git tag -d $(git tag --points-at HEAD)

      - name: Install Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python }}
          architecture: ${{ matrix.arch }}

      - name: Source Distribution
        if: strategy.job-index == 0
        run: |
          python -m pip install --upgrade pip setuptools wheel build
          python -m build -s .

      - name: Wheel Distribution
        # Impure Linux wheels are built in the manylinux job.
        if: (env.PURE == 'true' && strategy.job-index == 0) || (env.PURE == 'false' && runner.os != 'Linux')
        run: |
          python -m pip install --upgrade pip setuptools wheel build
          python -m build -w .

      - name: Upload Artifact
        if: strategy.job-index == 0 || (env.PURE == 'false' && runner.os != 'Linux')
        uses: actions/upload-artifact@v3
        with:
          name: dist
          path: ./dist

      - name: Set Variables for Conda Build
        shell: bash
        run: |
          if [ $NOARCH == true ]; then
              CONDA_BUILD_ARGS="--noarch"
          else
              CONDA_BUILD_ARGS=""
          fi
          echo "CONDA_BUILD_ARGS=$CONDA_BUILD_ARGS" >> $GITHUB_ENV

      - name: Install Miniconda
        # We need https://github.com/conda-incubator/setup-miniconda/pull/189 in order
        # to be able to install 32-bit miniconda on Windows. Once setup-miniconda 2.1.2
        # is released with this fix, can change to @v2.
        uses: conda-incubator/setup-miniconda@1a875d105ac03256664b54c882c8c374ce617ef6
        with:
          auto-update-conda: true
          python-version: ${{ matrix.python }}
          architecture: ${{ matrix.arch }}
          miniconda-version: "latest"

      - name: Workaround conda-build incompatibility with xcode >12
        if: runner.os == 'macOS'
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: 11.7

      - name: Conda package (Unix)
        if: runner.os != 'Windows'
        shell: bash -l {0}
        run: |
          conda install -c labscript-suite setuptools-conda
          setuptools-conda build $CONDA_BUILD_ARGS .

      - name: Conda Package (Windows)
        if: runner.os == 'Windows'
        shell: cmd /C CALL {0}
        run: |
          conda install -c labscript-suite setuptools-conda && ^
          setuptools-conda build %CONDA_BUILD_ARGS% --croot ${{ runner.temp }}\cb .

      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: conda_packages
          path: ./conda_packages


  manylinux:
    name: Build Manylinux
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        if: env.PURE == 'false'
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Ignore Tags
        if: github.event.ref_type != 'tag' && env.PURE == 'false'
        run: git tag -d $(git tag --points-at HEAD)

      - name: Build Manylinux Wheels
        if: env.PURE == 'false'
        uses: RalfG/python-wheels-manylinux-build@v0.4.2
        with:
          python-versions: 'cp37-cp37m cp38-cp38 cp39-cp39 cp310-cp310'
          pre-build-command: 'git config --global --add safe.directory "*"'

      - name: Upload Artifact
        if: env.PURE == 'false'
        uses: actions/upload-artifact@v3
        with:
          name: dist
          path: dist/*manylinux*.whl
